Collections Framework:
    Collections framework is just a collection of classes and interfaces which
    contain a lot of useful methods that we can use to store and manipulate
    large amounts of data.
Why we should use Collections Framework?
Arrays and variables are not good for storing and manipulating large amounts of data
as Arrays are
1)Fixed in the size.
2) There are no built-in methods in arrays.
When we should use Arrays are they useless now?
    Arrays are not useless Even the ArrayList is built using the arrays under the
    hood.
    1) Arrays are Fast and very space efficient when we know the size of something
    in advance we should prefer arrays.
Wrapper Classes:
    Wrapper classes are object types. For every primitive data type we have a wrapper
    type.
Why should we use wrapper classes
    1)which can be treated as we treat objects. we
    can call methods which is not possible with primitive.
    2) Collections framework only works with classes which means we can't
    use primitives.

ArrayList:
 The Data is stored in consecutive memory locations. Meaning accessing this data will be easier
 how ever if we have to add something in-between later one we must shift the the data.
LinkedList:
    Data is not stored in consecutive memory locations meaning its going to be hard and slow
    to find and access the data as we must go through all the elements which are present before it.
    But adding and removing elements from in-between will be super easy as we just need to re-adjust
    the links.
Interview Questions?
    90% the operations are retrieving the stored data and 10% are adding or removing the elements
    which datastructures we should use ArrayList or LinkedList?
    ArraysList as it is much faster and easier to retrieve it.
Sets:
    Set is an interface in collections framework. There are three main classes which implement this
    interface they are called 1)HashSet 2) LinkedHashSet 3) TreeSet. One thing is common in
    all of the classes they don't allow to store duplicate data.
HashSet:
    UpSide: Its Fast(Batch17)
    Downside: It doesn't maintain the insertion order.
LinkedHashSet:
    UpSide: Maintains the insertion order
    DownSide: Its slower than HashSet.
TreeSet:
    Upside: Keeps the data in sorted order.
    DownSide: Slowest of all.
